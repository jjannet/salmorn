//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace salmorn_admin.DAO
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__EFMigrationsHistory> C__EFMigrationsHistory { get; set; }
        public virtual DbSet<C_Test> C_Test { get; set; }
        public virtual DbSet<L_FileUpload> L_FileUpload { get; set; }
        public virtual DbSet<M_PostType> M_PostType { get; set; }
        public virtual DbSet<M_Product> M_Product { get; set; }
        public virtual DbSet<M_Product_Image> M_Product_Image { get; set; }
        public virtual DbSet<S_Role> S_Role { get; set; }
        public virtual DbSet<S_RoleMapping> S_RoleMapping { get; set; }
        public virtual DbSet<S_User> S_User { get; set; }
        public virtual DbSet<T_CustomerOneTime> T_CustomerOneTime { get; set; }
        public virtual DbSet<T_Order> T_Order { get; set; }
        public virtual DbSet<T_Order_D> T_Order_D { get; set; }
        public virtual DbSet<T_PaymentNotification> T_PaymentNotification { get; set; }
        public virtual DbSet<T_Post> T_Post { get; set; }
        public virtual DbSet<T_ProductStocks> T_ProductStocks { get; set; }
        public virtual DbSet<T_Shipping> T_Shipping { get; set; }
        public virtual DbSet<T_Shipping_D> T_Shipping_D { get; set; }
        public virtual DbSet<T_Shipping_H> T_Shipping_H { get; set; }
    
        public virtual int sp_m_product_add(Nullable<int> id, string code, Nullable<decimal> cost, string detail, Nullable<bool> isActive, Nullable<bool> isPreOrder, Nullable<bool> isUseStock, string name, string note, Nullable<System.DateTime> preEnd, Nullable<System.DateTime> preStart, Nullable<decimal> price, Nullable<int> qtyShippingPriceCeiling, Nullable<decimal> shippintPriceRate, string unitName, Nullable<decimal> weight, Nullable<int> createBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(decimal));
    
            var detailParameter = detail != null ?
                new ObjectParameter("detail", detail) :
                new ObjectParameter("detail", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isPreOrderParameter = isPreOrder.HasValue ?
                new ObjectParameter("isPreOrder", isPreOrder) :
                new ObjectParameter("isPreOrder", typeof(bool));
    
            var isUseStockParameter = isUseStock.HasValue ?
                new ObjectParameter("isUseStock", isUseStock) :
                new ObjectParameter("isUseStock", typeof(bool));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var preEndParameter = preEnd.HasValue ?
                new ObjectParameter("preEnd", preEnd) :
                new ObjectParameter("preEnd", typeof(System.DateTime));
    
            var preStartParameter = preStart.HasValue ?
                new ObjectParameter("preStart", preStart) :
                new ObjectParameter("preStart", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var qtyShippingPriceCeilingParameter = qtyShippingPriceCeiling.HasValue ?
                new ObjectParameter("qtyShippingPriceCeiling", qtyShippingPriceCeiling) :
                new ObjectParameter("qtyShippingPriceCeiling", typeof(int));
    
            var shippintPriceRateParameter = shippintPriceRate.HasValue ?
                new ObjectParameter("shippintPriceRate", shippintPriceRate) :
                new ObjectParameter("shippintPriceRate", typeof(decimal));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("unitName", unitName) :
                new ObjectParameter("unitName", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(decimal));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("createBy", createBy) :
                new ObjectParameter("createBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_m_product_add", idParameter, codeParameter, costParameter, detailParameter, isActiveParameter, isPreOrderParameter, isUseStockParameter, nameParameter, noteParameter, preEndParameter, preStartParameter, priceParameter, qtyShippingPriceCeilingParameter, shippintPriceRateParameter, unitNameParameter, weightParameter, createByParameter);
        }
    
        public virtual int sp_m_product_edit(Nullable<int> id, Nullable<decimal> cost, string detail, Nullable<bool> isActive, Nullable<bool> isPreOrder, Nullable<bool> isUseStock, string name, string note, Nullable<System.DateTime> preEnd, Nullable<System.DateTime> preStart, Nullable<decimal> price, Nullable<int> qtyShippingPriceCeiling, Nullable<decimal> shippintPriceRate, string unitName, Nullable<decimal> weight, Nullable<int> updateBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(decimal));
    
            var detailParameter = detail != null ?
                new ObjectParameter("detail", detail) :
                new ObjectParameter("detail", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isPreOrderParameter = isPreOrder.HasValue ?
                new ObjectParameter("isPreOrder", isPreOrder) :
                new ObjectParameter("isPreOrder", typeof(bool));
    
            var isUseStockParameter = isUseStock.HasValue ?
                new ObjectParameter("isUseStock", isUseStock) :
                new ObjectParameter("isUseStock", typeof(bool));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var preEndParameter = preEnd.HasValue ?
                new ObjectParameter("preEnd", preEnd) :
                new ObjectParameter("preEnd", typeof(System.DateTime));
    
            var preStartParameter = preStart.HasValue ?
                new ObjectParameter("preStart", preStart) :
                new ObjectParameter("preStart", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var qtyShippingPriceCeilingParameter = qtyShippingPriceCeiling.HasValue ?
                new ObjectParameter("qtyShippingPriceCeiling", qtyShippingPriceCeiling) :
                new ObjectParameter("qtyShippingPriceCeiling", typeof(int));
    
            var shippintPriceRateParameter = shippintPriceRate.HasValue ?
                new ObjectParameter("shippintPriceRate", shippintPriceRate) :
                new ObjectParameter("shippintPriceRate", typeof(decimal));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("unitName", unitName) :
                new ObjectParameter("unitName", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(decimal));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("updateBy", updateBy) :
                new ObjectParameter("updateBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_m_product_edit", idParameter, costParameter, detailParameter, isActiveParameter, isPreOrderParameter, isUseStockParameter, nameParameter, noteParameter, preEndParameter, preStartParameter, priceParameter, qtyShippingPriceCeilingParameter, shippintPriceRateParameter, unitNameParameter, weightParameter, updateByParameter);
        }
    
        public virtual ObjectResult<sp_test_Result> sp_test()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_test_Result>("sp_test");
        }
    }
}
